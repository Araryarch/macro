{
  "C Competitive Programming Snippets": {
    "scope": "c, cpp",
    "prefix": "ccomp",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <string.h>",
      "#include <math.h>",
      "#include <stdbool.h>",
      "#include <time.h>",
      "#include <limits.h>",
      "#include <ctype.h>",
      "",
      "// Logging",
      "#define log(msg) printf(\"%s\\n\", msg)",
      "#define logError(msg) fprintf(stderr, \"%s\\n\", msg)",
      "#define assert(condition, msg) if (!(condition)) { logError(msg); exit(1); }",
      "",
      "// Array methods",
      "#define length(arr) (sizeof(arr) / sizeof((arr)[0]))",
      "#define forEach(arr, func) for (int i = 0; i < length(arr); i++) { func(arr[i]); }",
      "#define map(arr, func, result) for (int i = 0; i < length(arr); i++) { result[i] = func(arr[i]); }",
      "#define filter(arr, func, result, result_len) { int j = 0; for (int i = 0; i < length(arr); i++) { if (func(arr[i])) result[j++] = arr[i]; } *result_len = j; }",
      "#define reduce(arr, func, initial) ({ int acc = initial; for (int i = 0; i < length(arr); i++) { acc = func(acc, arr[i]); } acc; })",
      "#define includes(arr, value) ({ bool found = false; for (int i = 0; i < length(arr); i++) if (arr[i] == value) { found = true; break; } found; })",
      "#define reverse(arr) for (int i = 0; i < length(arr) / 2; i++) { int temp = arr[i]; arr[i] = arr[length(arr) - 1 - i]; arr[length(arr) - 1 - i] = temp; }",
      "#define sortAsc(arr) qsort(arr, length(arr), sizeof(arr[0]), cmpAsc)",
      "#define sortDesc(arr) qsort(arr, length(arr), sizeof(arr[0]), cmpDesc)",
      "#define unique(arr, result, result_len) { int j = 0; for (int i = 0; i < length(arr); i++) { if (!includes(result, arr[i])) result[j++] = arr[i]; } *result_len = j; }",
      "#define push(arr, value) arr[length(arr)] = value",
      "#define pop(arr) (length(arr) > 0 ? --len : 0)",
      "#define shift(arr) { for (int i = 1; i < length(arr); i++) arr[i - 1] = arr[i]; len--; }",
      "#define unshift(arr, value) { for (int i = length(arr); i > 0; i--) arr[i] = arr[i - 1]; arr[0] = value; len++; }",
      "",
      "// String methods",
      "#define startsWith(str, prefix) (strncmp(str, prefix, strlen(prefix)) == 0)",
      "#define endsWith(str, suffix) ({ int l1 = strlen(str); int l2 = strlen(suffix); (l1 >= l2 && strcmp(str + l1 - l2, suffix) == 0); })",
      "#define toUpperCase(str) for (int i = 0; str[i]; i++) str[i] = toupper(str[i])",
      "#define toLowerCase(str) for (int i = 0; str[i]; i++) str[i] = tolower(str[i])",
      "#define split(str, delimiter, result, result_len) { char *token = strtok(str, delimiter); int i = 0; while (token != NULL) { result[i++] = token; token = strtok(NULL, delimiter); } *result_len = i; }",
      "#define join(arr, len, delimiter, result) { strcpy(result, arr[0]); for (int i = 1; i < len; i++) { strcat(result, delimiter); strcat(result, arr[i]); } }",
      "#define repeat(str, n, result) { result[0] = '\\0'; for (int i = 0; i < n; i++) strcat(result, str); }",
      "#define trim(str) { char *end; while (isspace((unsigned char)*str)) str++; if (*str == 0) return; end = str + strlen(str) - 1; while (end > str && isspace((unsigned char)*end)) end--; end[1] = '\\0'; }",
      "#define replace(str, from, to, result) { char *pos = strstr(str, from); if (pos != NULL) { strncpy(result, str, pos - str); result[pos - str] = '\\0'; strcat(result, to); strcat(result, pos + strlen(from)); } else strcpy(result, str); }",
      "#define substring(str, start, len) (strndup(str + start, len))",
      "#define length(str) (strlen(str))",
      "",
      "// Math utilities",
      "#define max(a, b) ((a) > (b) ? (a) : (b))",
      "#define min(a, b) ((a) < (b) ? (a) : (b))",
      "#define pow(base, exp) (pow(base, exp))",
      "#define sqrt(n) (sqrt(n))",
      "#define abs(n) (abs(n))",
      "#define ceil(n) (ceil(n))",
      "#define floor(n) (floor(n))",
      "#define round(n) (round(n))",
      "#define random(min, max) ((min) + rand() % ((max) - (min) + 1))",
      "#define clamp(n, minVal, maxVal) (max(minVal, min(n, maxVal)))",
      "#define gcd(a, b) ({ int _a = a, _b = b; while (_b != 0) { int t = _b; _b = _a % _b; _a = t; } _a; })",
      "#define lcm(a, b) ((a * b) / gcd(a, b))",
      "",
      "// Bitwise operations",
      "#define andBits(x, y) ((x) & (y))",
      "#define orBits(x, y) ((x) | (y))",
      "#define xorBits(x, y) ((x) ^ (y))",
      "#define notBits(x) (~(x))",
      "#define shiftLeft(x, n) ((x) << (n))",
      "#define shiftRight(x, n) ((x) >> (n))",
      "",
      "// Sorting and Searching algorithms",
      "#define binarySearch(arr, value) (bsearch(&value, arr, length(arr), sizeof(arr[0]), cmp))",
      "#define lowerBound(arr, value) ({ int l = 0, r = length(arr), m; while (l < r) { m = (l + r) / 2; if (arr[m] < value) l = m + 1; else r = m; } l; })",
      "#define upperBound(arr, value) ({ int l = 0, r = length(arr), m; while (l < r) { m = (l + r) / 2; if (arr[m] <= value) l = m + 1; else r = m; } l; })",
      "#define nextPermutation(arr) (next_permutation(arr, arr + length(arr)))",
      "#define prevPermutation(arr) (prev_permutation(arr, arr + length(arr)))",
      "",
      "// Time utilities",
      "#define now() (clock())",
      "#define sleep(ms) (usleep((ms) * 1000))",
      "#define duration(start, end) (((double)(end - start)) / CLOCKS_PER_SEC)",
      "",
      "// Miscellaneous",
      "#define isEven(n) ((n) % 2 == 0)",
      "#define isOdd(n) ((n) % 2 != 0)",
      "#define swap(a, b) { int temp = a; a = b; b = temp; }",
      "#define repeat(n, func) for (int i = 0; i < n; i++) func()",
      "",
      "int cmpAsc(const void *a, const void *b) { return (*(int*)a - *(int*)b); }",
      "int cmpDesc(const void *a, const void *b) { return (*(int*)b - *(int*)a); }",
      "int cmp(const void *a, const void *b) { return (*(int*)a - *(int*)b); }",
      "",
      "int main() {",
      "  $1",
      "  return 0;",
      "}"
    ],
    "description": "Competitive Programming with JavaScript-like macros for C"
  }
}
